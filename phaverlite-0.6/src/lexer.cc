
#line 3 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 122
#define YY_END_OF_BUFFER 123
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1138] =
    {   0,
        0,    0,  114,  114,  123,  121,  120,  119,  109,  110,
      110,  106,  109,  109,  108,  109,  109,  109,  109,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  114,  116,  115,    0,  118,  110,  110,  112,
      113,  111,    0,  108,    0,  107,  105,  103,  104,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  114,  115,  115,  117,  112,  111,

      108,    0,  108,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       96,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  101,    4,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   82,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   99,  110,   98,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  100,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,   84,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,   97,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   88,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   81,   12,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   21,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   40,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   76,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

       94,  110,  110,  110,  110,  110,  110,  110,  110,  110,
        1,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      102,   89,   91,  110,  110,  110,  110,  110,   95,   92,
      110,  110,  110,  110,  110,   80,  110,   93,  110,  110,
       87,  110,  110,  110,  110,  110,  110,  110,   90,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   11,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,    5,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,   39,  110,  110,  110,  110,  110,
      110,  110,  110,   28,  110,  110,   63,   86,  110,  110,
       85,  110,  110,   26,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,   19,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   50,  110,   37,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   73,
      110,  110,  110,   68,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,    7,  110,

      110,   27,   83,   62,  110,  110,  110,  110,  110,    3,
      110,  110,   60,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   77,   18,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,    2,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,   20,   79,

      110,   64,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   14,
      110,  110,  110,  110,  110,   22,  110,  110,  110,   13,
      110,  110,  110,  110,  110,  110,   49,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,   72,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   66,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

       57,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   47,   78,  110,   61,
      110,  110,   25,  110,  110,  110,  110,  110,  110,  110,
      110,   65,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,   15,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   48,  110,  110,  110,  110,   74,  110,  110,
       70,   71,  110,  110,  110,   43,  110,  110,  110,   52,
      110,    8,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   46,  110,   17,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,   24,
      110,   58,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   32,  110,   23,   42,  110,
      110,  110,  110,  110,    6,  110,  110,  110,   45,  110,
      110,   54,  110,   41,  110,  110,  110,   75,  110,  110,
      110,  110,  110,   16,  110,  110,  110,  110,  110,  110,
       69,  110,  110,  110,  110,  110,   59,  110,   36,   44,
      110,  110,  110,  110,  110,  110,    9,  110,  110,  110,
      110,  110,   29,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   38,  110,  110,  110,   67,  110,  110,

      110,  110,   51,  110,   33,  110,  110,  110,  110,  110,
       10,  110,  110,   56,  110,  110,  110,  110,  110,   53,
      110,  110,  110,  110,  110,   55,  110,   31,  110,  110,
       30,  110,  110,  110,   35,   34,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    4,    7,    4,
        4,    8,    9,    4,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    4,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,    1,   45,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   28,   63,   64,   65,   66,   67,   68,   28,
       69,   28,    4,    4,    4,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    1,    1,
        1,    1,    3,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[1146] =
    {   0,
        0,    0,   68,   69, 1229, 1230, 1230, 1230, 1230,   77,
        0, 1230, 1218,   87,   85, 1211, 1210, 1209, 1208, 1187,
     1189, 1194,   78,   71, 1197,   51,   46,   50, 1158,   51,
     1169, 1170, 1165,   43, 1154, 1163,   62, 1162,   63, 1149,
     1151, 1156,    0, 1230,  103, 1204, 1203,  136,    0,    0,
     1230,    0, 1194,  106,  114, 1230, 1230, 1230, 1230, 1187,
     1173, 1173, 1176, 1171, 1169, 1165, 1169,   94, 1179, 1178,
     1165, 1149, 1144, 1128, 1132, 1139, 1138, 1135, 1130, 1122,
       94, 1140, 1136, 1121, 1120,   65,  108, 1115, 1116, 1133,
     1119, 1112, 1119,  103,    0,  122,  123, 1230,    0,    0,

      149, 1163, 1162, 1140, 1137, 1145, 1139, 1137, 1142,  129,
     1126, 1146, 1139, 1130, 1130, 1140, 1141, 1115, 1099, 1094,
     1103, 1105, 1095, 1091, 1108, 1088, 1086, 1100, 1103,  119,
     1103, 1095, 1100, 1086, 1089, 1095, 1088, 1081, 1094, 1089,
     1088, 1092, 1072, 1087, 1084, 1073, 1073, 1074,    0,    0,
     1094, 1093, 1092, 1093, 1096, 1103, 1098, 1078, 1097, 1090,
     1100, 1084, 1073, 1085, 1059, 1057,  116, 1055, 1063,    0,
     1062,  114, 1057, 1046, 1047, 1046, 1049, 1047, 1055,  118,
     1054, 1045, 1038, 1051, 1047, 1040, 1032, 1039, 1034, 1050,
      115, 1044, 1036,    0, 1044,    0, 1041, 1056, 1044, 1070,

     1046, 1060, 1051, 1048, 1055, 1037, 1059, 1055, 1054, 1045,
     1046, 1030, 1029, 1020, 1028, 1022, 1009,    0, 1011, 1023,
     1022, 1022, 1003, 1011, 1003,  999, 1016, 1002, 1001, 1014,
     1008, 1012, 1008, 1009, 1004, 1003, 1002,  988,  134, 1004,
      999, 1003, 1001,  990,    0, 1027, 1024, 1017,  997,  999,
      995, 1013, 1012,  168,  992,  991, 1003, 1002,  998,  985,
      967,  971,  963,    0,  978,  961,  964,  968,  958,  973,
      976,  957,  970,  971,  954,  963,  953,  951,  962,  949,
      965,  966,    0,    0,  960,  949,  947,  957,  944,  954,
      938,  956,  957,  975,  968,  968,  968,  975,  973,  963,

      963,  967,  164,  973,  973,  968,  953,  953,  174,  957,
      950,  950,  948,  933,  922,  918,  934,  920,  147,  932,
      155,  931,  928,  916,  906,  911,  919,  921,  910,  908,
      918,  905,  921,  908,  907,    0,  904,  917,  902,  896,
      905,  912,  894,   75,  925,  924,  909,  921,  907,  925,
      919,  928,  912,  925,  915,  900,  904,  910,  910,  919,
      915,  917,  920,  172,  907,  901,  913,  889,  897,  898,
      874,  871,    0,  867,  880,  865,  864,  867,  861,  855,
      860,  857,  856,    0,  856,  872,  855,  857,  858,  852,
      867,  848,  861,  850,  864,  138,  863,  853,  847,  843,

        0,  844,  838,  866,  866,  881,  878,  875,  857,  851,
        0,  860,  876,  858,  858,  846,  858,  856,  843,  865,
      852,  845,  850,  857,  864,  859,  844,  853,  833,  859,
        0,    0,    0,  826,  821,  811,  823,  808,    0,    0,
      817,  825,  819,  821,  804,    0,  812,    0,  804,  804,
      818,  814,  810,  801,  794,  807,  793,  806,    0,  807,
      792,  808,  816,  819,  828,  823,  803,  193,  821,  813,
      809,  822,  817,  808,  796,  196,  820,  813,  793,  801,
      804,  806,  789,  808,  801,  197,  805,  785,  783,  778,
      763,  780,  765,  778,  775,  765,  771,  756,  766,    0,

      767,  173,  756,  750,  753,  753,  759,  767,  748,  759,
      790,  774,  767,    0,  777,  784,  779,  781,  768,  771,
      758,  754,  764,  774,  760,  759,  190,  775,  761,  766,
      763,  752,  769,  762,  753,  757,  198,  753,  748,  751,
      746,  750,  734,  720,    0,  728,  713,  717,  712,  710,
      723,  724,  707,    0,  710,  720,    0,    0,  722,  716,
        0,  706,  717,    0,  718,  737,  744,  739,  724,  726,
      736,  723,  730,  737,  732,  733,  734,  725,  728,  704,
      712,  712,  714,  714,  714,  698,  192,  717,  705,  714,
      717,  705,  715,  715,  713,  701,  706,  688,  657,  653,

       12,   61,   96,  107,  130,  174,  156,  172,  162,  175,
      168,  185,  174,  174,  187,  202,  213,  219,  219,  210,
      223,  218,  213,  217,  202,  216,  223,  219,  217,  226,
      208,  232,  215,  221,  235,  222,  224,  231,  240,  237,
      228,  230,    0,  227,  222,  234,  247,  236,  226,  209,
      210,  211,  212,  230,  223,  219,  228,  226,  232,  215,
      221,  221,  237,  241,  228,  238,  254,  259,  246,  258,
      258,  266,  257,  262,  268,  262,  268,  269,  279,    0,
      271,  280,  259,  260,  270,  285,  263,  283,  284,  285,
      292,  281,  288,  279,  271,  282,  281,  275,    0,  292,

      268,    0,    0,    0,  260,  272,  273,  279,  267,    0,
      282,  275,    0,  280,  283,  269,  288,  308,  299,  316,
      292,  302,  294,  295,  315,  320,  309,  308,  309,  301,
      311,  316,  329,  324,  317,  312,  331,  324,  337,  318,
      326,  330,  328,  318,  316,  327,  331,  346,  336,  340,
      315,  305,  310,    0,    0,  311,  309,  306,  328,  314,
      312,  320,  336,  344,  360,  345,    0,  346,  353,  348,
      350,  360,  369,  343,  359,  368,  357,  360,  357,  376,
      350,  367,  375,  367,  377,  382,  366,  357,  381,  381,
      372,  373,  378,  390,  383,  380,  352,  358,    0,    0,

      364,    0,  360,  356,  354,  357,  396,  374,  382,  396,
      396,  397,  398,  389,  402,  401,  399,  407,  397,  413,
      402,  412,  410,  412,  420,  394,  405,  396,  411,    0,
      417,  399,  419,  417,  412,    0,  418,  428,  424,    0,
      399,  407,  394,  391,  409,  408,    0,  427,  423,  425,
      430,  443,  431,  421,  419,  441,  435,  441,  434,  433,
      432,    0,  433,  438,  442,  437,  442,  442,  432,  448,
      455,  449,  463,  448,  457,  452,  466,  464,  451,  429,
      435,  424,  427,  438,  430,  472,    0,  473,  474,  467,
      481,  478,  478,  480,  468,  474,  479,  481,  489,  486,

        0,  473,  481,  476,  490,  492,  492,  486,  481,  486,
      496,  484,  484,  487,  501,  492,    0,    0,  460,    0,
      463,  467,    0,  491,  493,  484,  495,  500,  487,  507,
      500,  490,  510,  513,  506,  510,  500,  496,  513,  521,
      515,  519,  510,  525,  522,  525,  532,  515,    0,  516,
      535,  509,  505,  510,  493,  533,  534,  526,  516,  538,
      545,  530,    0,  528,  530,  543,  547,    0,  524,  545,
        0,    0,  549,  542,  548,    0,  553,  546,  556,    0,
      532,    0,  557,  518,  527,  519,  551,  552,  563,  565,
      558,  557,  567,  556,  557,    0,  571,    0,  569,  558,

      558,  562,  566,  577,  578,  576,  566,  581,  570,    0,
      546,    0,  585,  578,  579,  583,  588,  587,  594,  577,
      592,  581,  579,  588,  600,    0,  598,    0,    0,  575,
      589,  593,  601,  560,    0,  604,  604,  597,    0,  599,
      609,    0,  585,    0,  602,  603,  602,    0,  599,  607,
      618,  617,  575,    0,  601,  605,  619,  617,  624,  615,
        0,  625,  613,  625,  607,  623,    0,  632,    0,    0,
      606,  633,  608,  632,  626,  625,    0,  622,  627,  624,
      628,  635,  617,  637,  629,  639,  646,  634,  628,  633,
      649,  651,  637,    0,  643,  654,  648,    0,  656,  643,

      643,  655,    0,  651,  638,  658,  651,  650,  653,  657,
        0,  668,  654,    0,  663,  667,  676,  658,  670,    0,
      675,  667,  670,  666,  670,    0,  678,    0,  677,  686,
        0,  674,  677,  683,    0,    0, 1230,  708,  712,  711,
      716,  719,  723,  727,  731
    } ;

static const flex_int16_t yy_def[1146] =
    {   0,
     1137,    1, 1138, 1138, 1137, 1137, 1137, 1137, 1137, 1139,
     1140, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1141, 1137, 1142, 1143, 1143, 1139, 1140, 1144,
     1137, 1145, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1141, 1142, 1142, 1137, 1144, 1145,

     1137, 1137, 1137, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140,    0, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137
    } ;

static const flex_int16_t yy_nxt[1301] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,    9,    9,   13,
        9,   14,   15,   16,   17,   18,   19,   11,   20,   11,
       21,   11,   11,   11,   11,   11,   11,   11,   11,   22,
       23,   11,   11,   24,   25,   26,   27,   11,   11,   11,
       11,   11,   11,    9,    9,   11,   28,   11,   29,   30,
       31,   32,   33,   11,   34,   11,   11,   35,   36,   11,
       11,   37,   38,   39,   40,   41,   11,   42,   11,    6,
       44,   44,   71,   69,  652,   45,   45,   46,   46,   72,
       46,   47,   70,   46,   46,   46,   46,   46,   46,   66,
       46,   46,   46,   46,   51,   53,   63,   54,   52,   73,

       64,   76,   81,   67,   65,   77,   82,   55,   85,   88,
       97,  653,  112,   89,   98,   74,   53,  113,   54,  134,
       46,   46,  102,  102,   86,  135,  103,   90,   55, 1137,
       97,   91,  402, 1137,   98,   55,   46,   46,  403,   46,
       47,  654,   46,   46,   46,   46,   46,   46,  126,   46,
       46,   46,   46,  147,  136,  127,   55,  148,  128,  137,
      129,  101,  214,  149,  156,  157,  138,  139,  219,  177,
      655,   55,  228,  178,  140,  220,  240,  241,  215,   46,
       46,  179,  286,  229,  656,  287,  288,  302,  303,  354,
      423,  304,  454,  376,  361,  362,  355,  377,  305,   55,

      379,  455,  306,  307,  363,  308,  424,  364,  581,  365,
      637,  366,  380,  517,  518,  528,  529,  540,  556,  657,
      658,  592,  659,  541,  660,  661,  519,  582,  520,  593,
      662,  663,  530,  664,  665,  666,  557,  638,  667,  668,
      669,  670,  671,  672,  673,  674,  675,  676,  677,  678,
      679,  680,  681,  682,  683,  684,  685,  687,  688,  686,
      689,  690,  691,  692,  693,  694,  695,  696,  697,  698,
      699,  700,  701,  702,  703,  704,  705,  706,  707,  708,
      709,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      719,  720,  721,  722,  723,  724,  725,  726,  727,  728,

      729,  730,  731,  732,  733,  734,  735,  736,  737,  738,
      740,  741,  742,  743,  744,  745,  746,  739,  747,  748,
      749,  750,  751,  752,  753,  754,  755,  756,  757,  758,
      759,  760,  761,  762,  763,  764,  765,  766,  767,  768,
      769,  770,  771,  772,  773,  774,  775,  776,  777,  778,
      779,  780,  781,  782,  783,  784,  785,  786,  787,  788,
      789,  790,  791,  792,  793,  794,  796,  797,  798,  799,
      800,  801,  802,  803,  804,  795,  805,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  828,

      829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  842,  843,  844,  845,  846,  847,  848,
      849,  850,  851,  853,  854,  855,  856,  857,  858,  860,
      852,  861,  862,  863,  864,  859,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,  877,  878,
      879,  880,  881,  882,  883,  884,  885,  886,  887,  888,
      889,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      899,  900,  901,  902,  903,  904,  905,  906,  907,  908,
      909,  910,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  911,  927,  928,

      929,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  960,  961,  962,  963,  964,  965,  966,  967,  968,
      969,  970,  971,  972,  973,  974,  975,  976,  977,  978,
      979,  980,  981,  982,  983,  984,  985,  986,  987,  988,
      989,  990,  991,  992,  994,  995,  996,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,  993,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1009, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,

     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
     1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
     1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
     1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
     1091, 1100, 1101, 1103, 1102, 1104, 1105, 1106, 1107, 1108,
     1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
     1120, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,

     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,   43,   43,
       43,   43,   48,   49,   48,   48,   95,  651,   95,   96,
      650,   96,   96,   46,  649,   46,   46,   99,  648,   99,
       99,  100,  647,  100,  100,  646,  645,  644,  643,  642,
      641,  640,  639,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  580,  579,  578,  577,  576,

      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  527,  526,  525,  524,  523,  522,  521,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,

      464,  463,  462,  461,  460,  459,  458,  457,  456,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  378,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  360,  359,
      358,  357,  356,  353,  352,  351,  350,  349,  348,  347,

      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  239,  238,  237,  236,  235,

      234,  233,  232,  231,  230,  227,  226,  225,  224,  223,
      222,  221,  218,  217,  216,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  155,  154,
      153,  152,  151,  150,  103,  103,  146,  145,  144,  143,
      142,  141,  133,  132,  131,  130,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  114,  111,  110,

      109,  108,  107,  106,  105,  104,  101,   47,   47,   94,
       93,   92,   87,   84,   83,   80,   79,   78,   75,   68,
       62,   61,   60,   59,   58,   57,   56,   50, 1137,    5,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137

    } ;

static const flex_int16_t yy_chk[1301] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,   27,   26,  601,    3,    4,   10,   10,   27,
       10,   10,   26,   10,   10,   10,   10,   10,   10,   24,
       10,   10,   10,   10,   14,   15,   23,   15,   14,   28,

       23,   30,   34,   24,   23,   30,   34,   15,   37,   39,
       45,  602,   68,   39,   45,   28,   54,   68,   54,   86,
       10,   10,   55,   55,   37,   86,   55,   39,   54,   96,
       97,   39,  344,   96,   97,   15,   48,   48,  344,   48,
       48,  603,   48,   48,   48,   48,   48,   48,   81,   48,
       48,   48,   48,   94,   87,   81,   54,   94,   81,   87,
       81,  101,  167,   94,  110,  110,   87,   87,  172,  130,
      604,  101,  180,  130,   87,  172,  191,  191,  167,   48,
       48,  130,  239,  180,  605,  239,  239,  254,  254,  303,
      364,  254,  396,  319,  309,  309,  303,  319,  254,  101,

      321,  396,  254,  254,  309,  254,  364,  309,  527,  309,
      587,  309,  321,  468,  468,  476,  476,  486,  502,  606,
      607,  537,  608,  486,  609,  610,  468,  527,  468,  537,
      611,  612,  476,  613,  614,  615,  502,  587,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  629,  630,  631,  632,  633,  634,  635,  636,  634,
      637,  638,  639,  640,  641,  642,  644,  645,  646,  647,
      648,  649,  650,  651,  652,  653,  654,  655,  656,  657,
      658,  659,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  676,  677,

      678,  679,  681,  682,  683,  684,  685,  686,  687,  688,
      689,  690,  691,  692,  693,  694,  695,  688,  696,  697,
      698,  700,  701,  705,  706,  707,  708,  709,  711,  712,
      714,  715,  716,  717,  718,  719,  720,  721,  722,  723,
      724,  725,  726,  727,  728,  729,  730,  731,  732,  733,
      734,  735,  736,  737,  738,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  749,  750,  751,  752,  753,
      756,  757,  758,  759,  760,  749,  761,  762,  763,  764,
      765,  766,  768,  769,  770,  771,  772,  773,  774,  775,
      776,  777,  778,  779,  780,  781,  782,  783,  784,  785,

      786,  787,  788,  789,  790,  791,  792,  793,  794,  795,
      796,  797,  798,  801,  803,  804,  805,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      811,  819,  820,  821,  822,  817,  823,  824,  825,  826,
      827,  828,  829,  831,  832,  833,  834,  835,  837,  838,
      839,  841,  842,  843,  844,  845,  846,  848,  849,  850,
      851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  863,  864,  865,  866,  867,  868,  869,  870,  871,
      872,  873,  874,  875,  876,  877,  878,  879,  880,  881,
      882,  883,  884,  885,  886,  888,  889,  873,  890,  891,

      892,  893,  894,  895,  896,  897,  898,  899,  900,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  919,  921,  922,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  941,  942,  943,  944,  945,  946,
      947,  948,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  961,  962,  964,  965,  966,  967,  969,
      970,  973,  974,  975,  977,  978,  979,  981,  983,  961,
      984,  985,  986,  987,  988,  989,  990,  991,  992,  993,
      983,  994,  995,  997,  999, 1000, 1001, 1002, 1003, 1004,

     1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027,
     1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041,
     1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055,
     1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066,
     1068, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
     1082, 1091, 1092, 1093, 1092, 1095, 1096, 1097, 1099, 1100,
     1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112,
     1113, 1112, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123,

     1124, 1125, 1127, 1129, 1130, 1132, 1133, 1134, 1138, 1138,
     1138, 1138, 1139, 1140, 1139, 1139, 1141,  600, 1141, 1142,
      599, 1142, 1142, 1143,  598, 1143, 1143, 1144,  597, 1144,
     1144, 1145,  596, 1145, 1145,  595,  594,  593,  592,  591,
      590,  589,  588,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  567,  566,  565,  563,  562,  560,  559,  556,
      555,  553,  552,  551,  550,  549,  548,  547,  546,  544,
      543,  542,  541,  540,  539,  538,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  526,  525,  524,  523,  522,

      521,  520,  519,  518,  517,  516,  515,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  501,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  475,  474,  473,  472,  471,  470,  469,  467,  466,
      465,  464,  463,  462,  461,  460,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  447,  445,  444,  443,
      442,  441,  438,  437,  436,  435,  434,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  415,  414,  413,  412,  410,  409,  408,  407,

      406,  405,  404,  403,  402,  400,  399,  398,  397,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      372,  371,  370,  369,  368,  367,  366,  365,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  343,  342,  341,
      340,  339,  338,  337,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  320,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  308,  307,
      306,  305,  304,  302,  301,  300,  299,  298,  297,  296,

      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  253,  252,
      251,  250,  249,  248,  247,  246,  244,  243,  242,  241,
      240,  238,  237,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  195,  193,  192,  190,  189,  188,  187,  186,

      185,  184,  183,  182,  181,  179,  178,  177,  176,  175,
      174,  173,  171,  169,  168,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  148,  147,  146,  145,  144,  143,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  132,  131,  129,
      128,  127,  126,  125,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  114,  113,  112,  111,  109,  108,
      107,  106,  105,  104,  103,  102,   93,   92,   91,   90,
       89,   88,   85,   84,   83,   82,   80,   79,   78,   77,
       76,   75,   74,   73,   72,   71,   70,   69,   67,   66,

       65,   64,   63,   62,   61,   60,   53,   47,   46,   42,
       41,   40,   38,   36,   35,   33,   32,   31,   29,   25,
       22,   21,   20,   19,   18,   17,   16,   13,    5, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../phaver/src/lexer.ll"
/* PHAVerLite: PHAVer + PPLite. -*- C++ -*-
   Copyright (C) 2018 Goran Frehse <goranf@gmail.com>
   Copyright (C) 2019-2023 Enea Zaffanella <enea.zaffanella@unipr.it>

This file is part of PHAVerLite.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#line 22 "../../../phaver/src/lexer.ll"
  #include <cstdlib>
  #include <cstring>
  #include <list>
  #include <string>
  #include "clock_val_set.hh"
  #include "rat_aff_expr.hh"
  #include "symb_states_type.hh"

  #include "parser.hh"
  void yyerror(const std::string&);
#line 1136 "lexer.cc"

#line 1138 "lexer.cc"

#define INITIAL 0
#define comment_mode 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 42 "../../../phaver/src/lexer.ll"

#line 1356 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1138 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1230 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 43 "../../../phaver/src/lexer.ll"
{return par_POLY_KIND;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 44 "../../../phaver/src/lexer.ll"
{return par_PARSER_FIX_DPOST;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "../../../phaver/src/lexer.ll"
{ return MERGE_SPLITTED; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "../../../phaver/src/lexer.ll"
{ return ASAP; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "../../../phaver/src/lexer.ll"
{return par_MEMORY_MODE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "../../../phaver/src/lexer.ll"
{return par_LIMIT_CONSTRAINTS_METHOD;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "../../../phaver/src/lexer.ll"
{return par_TIME_POST_ITER;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "../../../phaver/src/lexer.ll"
{return par_TIME_POST_CONE_LAMBDA;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "../../../phaver/src/lexer.ll"
{return par_TIME_POST_CONE_WIDEN_DELAY;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "../../../phaver/src/lexer.ll"
{return par_TIME_POST_CONE_WIDEN_PRECISION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "../../../phaver/src/lexer.ll"
{return PROJECT_TO;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 54 "../../../phaver/src/lexer.ll"
{return RENAME;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 55 "../../../phaver/src/lexer.ll"
{return DIFFERENCE_ASSIGN;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 56 "../../../phaver/src/lexer.ll"
{return par_REFINE_MAX_CHECKS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 57 "../../../phaver/src/lexer.ll"
{return par_REFINE_USE_NEW_SPLIT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 58 "../../../phaver/src/lexer.ll"
{return par_MINIMIZE_FILTER_THRESHOLD;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 59 "../../../phaver/src/lexer.ll"
{return par_REACH_FB_REFINE_METHOD;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 60 "../../../phaver/src/lexer.ll"
{return IS_REACHABLE_FB;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 61 "../../../phaver/src/lexer.ll"
{return IS_REACHABLE;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 62 "../../../phaver/src/lexer.ll"
{return INVARIANT_ASSIGN;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 63 "../../../phaver/src/lexer.ll"
{return REVERSE;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 64 "../../../phaver/src/lexer.ll"
{return par_SNAPSHOT_INTERVAL;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 65 "../../../phaver/src/lexer.ll"
{return par_REFINE_PARTITION_INSIDE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 66 "../../../phaver/src/lexer.ll"
{return REACH_FORWARD_ITER;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 67 "../../../phaver/src/lexer.ll"
{return UNLOCK_SURFACE_LOCS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 68 "../../../phaver/src/lexer.ll"
{return UNLOCK_LOCS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 69 "../../../phaver/src/lexer.ll"
{return GET_INVARIANTS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 70 "../../../phaver/src/lexer.ll"
{return PRINT_GRAPH;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 71 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TIME_RELEVANCE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TIME_RELEVANCE_DURING;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 73 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TIME_RELEVANCE_FINAL;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 74 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TRANS_DIMS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 75 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TIME_RELEVANCE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 76 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TIME_RELEVANCE_DURING;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 77 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TIME_RELEVANCE_FINAL;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 78 "../../../phaver/src/lexer.ll"
{return par_REFINE_CHECK_TRANS_DIMS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 79 "../../../phaver/src/lexer.ll"
{return par_SEARCH_METHOD;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 80 "../../../phaver/src/lexer.ll"
{return par_SEARCH_METHOD_TOPSORT_TOKENS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 81 "../../../phaver/src/lexer.ll"
{return INVERSE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 82 "../../../phaver/src/lexer.ll"
{return CONTAINS;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 83 "../../../phaver/src/lexer.ll"
{return par_REACH_CONSTRAINT_TRIGGER;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 84 "../../../phaver/src/lexer.ll"
{return par_REFINE_PRIORITIZE_ANGLE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 85 "../../../phaver/src/lexer.ll"
{return par_REFINE_DERIV_MINANGLE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 86 "../../../phaver/src/lexer.ll"
{return par_REFINE_PRIORITIZE_ANGLE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 87 "../../../phaver/src/lexer.ll"
{return par_REFINE_DERIV_MINANGLE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 88 "../../../phaver/src/lexer.ll"
{return par_REACH_CONSTRAINT_LIMIT;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 89 "../../../phaver/src/lexer.ll"
{return par_TP_CONSTRAINT_LIMIT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 90 "../../../phaver/src/lexer.ll"
{return par_REACH_BITSIZE_TRIGGER;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 91 "../../../phaver/src/lexer.ll"
{return par_CONSTRAINT_BITSIZE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 92 "../../../phaver/src/lexer.ll"
{return par_REFINE_USE_FP;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 93 "../../../phaver/src/lexer.ll"
{return par_REFINE_PRIORITIZE_REACH_SPLIT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 94 "../../../phaver/src/lexer.ll"
{return par_REFINE_SMALLEST_FIRST;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 95 "../../../phaver/src/lexer.ll"
{return par_REFINE_PRIORITIZE_REACH_SPLIT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 96 "../../../phaver/src/lexer.ll"
{return par_REFINE_SMALLEST_FIRST;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 97 "../../../phaver/src/lexer.ll"
{return par_REACH_STOP_USE_CONVEX_HULL_SETTLE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 98 "../../../phaver/src/lexer.ll"
{return par_REACH_STOP_USE_CONVEX_HULL_ITER;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 99 "../../../phaver/src/lexer.ll"
{return par_REACH_USE_BBOX_ITER;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 100 "../../../phaver/src/lexer.ll"
{return REFINE_CONSTRAINTS;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 101 "../../../phaver/src/lexer.ll"
{return REFINE_CONSTRAINTS;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 102 "../../../phaver/src/lexer.ll"
{return SAVE_FP_INVARS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 103 "../../../phaver/src/lexer.ll"
{return SAVE_FP_SURFACE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 104 "../../../phaver/src/lexer.ll"
{return INITIAL_STATES;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 105 "../../../phaver/src/lexer.ll"
{return REFINE_LOCS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 106 "../../../phaver/src/lexer.ll"
{return REFINE_LOC_DERIV;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 107 "../../../phaver/src/lexer.ll"
{return par_REACH_CHEAP_CONTAINS;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 108 "../../../phaver/src/lexer.ll"
{return par_MAINTAIN_BOXED_CCVS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 109 "../../../phaver/src/lexer.ll"
{return par_REACH_CHEAP_CONTAINS_USE_BBOX;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 110 "../../../phaver/src/lexer.ll"
{return par_REACH_USE_BBOX;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 111 "../../../phaver/src/lexer.ll"
{return par_REACH_USE_CONSTRAINT_HULL;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 112 "../../../phaver/src/lexer.ll"
{return par_REACH_USE_CONVEX_HULL;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "../../../phaver/src/lexer.ll"
{return par_REACH_USE_TIME_ELAPSE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 114 "../../../phaver/src/lexer.ll"
{return par_REACH_STOP_AT_FORB;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "../../../phaver/src/lexer.ll"
{return par_REACH_MAX_ITER;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "../../../phaver/src/lexer.ll"
{return par_REACH_REPORT_INTERVAL;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 117 "../../../phaver/src/lexer.ll"
{return par_REFINE_DERIVATIVE_METHOD;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 118 "../../../phaver/src/lexer.ll"
{return IS_EMPTY;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 119 "../../../phaver/src/lexer.ll"
{return IS_INTERSECTING;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 120 "../../../phaver/src/lexer.ll"
{return INTERSECTION_ASSIGN;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 121 "../../../phaver/src/lexer.ll"
{return LOC_INTERSECTION;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 122 "../../../phaver/src/lexer.ll"
{return LOC_UNION;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 123 "../../../phaver/src/lexer.ll"
{return REMOVE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 124 "../../../phaver/src/lexer.ll"
{return MY_ECHO;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 125 "../../../phaver/src/lexer.ll"
{return GET_PARAMETERS;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 126 "../../../phaver/src/lexer.ll"
{return PRINT;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 127 "../../../phaver/src/lexer.ll"
{return SAVE_GEN_FP;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 128 "../../../phaver/src/lexer.ll"
{return SAVE_CON_FP;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 129 "../../../phaver/src/lexer.ll"
{return REACH;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 130 "../../../phaver/src/lexer.ll"
{return DEFNE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 131 "../../../phaver/src/lexer.ll"
{return AUTOMATON;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 132 "../../../phaver/src/lexer.ll"
{return INTERNAL_VAR;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 133 "../../../phaver/src/lexer.ll"
{return INTERNAL_VAR;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 134 "../../../phaver/src/lexer.ll"
{return EXTERNAL_VAR;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 135 "../../../phaver/src/lexer.ll"
{return PARAMETER;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 136 "../../../phaver/src/lexer.ll"
{return SYNCLABS;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 137 "../../../phaver/src/lexer.ll"
{return INITIALLY;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 138 "../../../phaver/src/lexer.ll"
{return LOC;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 139 "../../../phaver/src/lexer.ll"
{return WHILE;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 140 "../../../phaver/src/lexer.ll"
{return WHEN;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 141 "../../../phaver/src/lexer.ll"
{return TRUE;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 142 "../../../phaver/src/lexer.ll"
{return FALSE;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 143 "../../../phaver/src/lexer.ll"
{return WHO;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 144 "../../../phaver/src/lexer.ll"
{return ADD_LABEL;}
	YY_BREAK
/* rules for operators */
case 103:
YY_RULE_SETUP
#line 148 "../../../phaver/src/lexer.ll"
{return EQ;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 149 "../../../phaver/src/lexer.ll"
{return GE;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 150 "../../../phaver/src/lexer.ll"
{return LE;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 151 "../../../phaver/src/lexer.ll"
{return PRIM;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 152 "../../../phaver/src/lexer.ll"
{return ASSIGN;}
	YY_BREAK
/* rules for float */
case 108:
YY_RULE_SETUP
#line 156 "../../../phaver/src/lexer.ll"
{
  yylval.mystring = new std::string(yytext); return INT;
}
	YY_BREAK
/* rule for characters */
case 109:
YY_RULE_SETUP
#line 162 "../../../phaver/src/lexer.ll"
{return *yytext;}
	YY_BREAK
/* rules for integers commented out, using rule for floats */
/*  [0-9]+  {*yylval.mystring = new std::string(yytext); return INT;} */
/* rules for identifiers */
case 110:
YY_RULE_SETUP
#line 170 "../../../phaver/src/lexer.ll"
{
  yylval.mystring = new std::string(yytext); return IDENT;
}
	YY_BREAK
/* rules for single line comments */
case 111:
YY_RULE_SETUP
#line 176 "../../../phaver/src/lexer.ll"
/* skip single line comment */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 177 "../../../phaver/src/lexer.ll"
/* skip single line comment */
	YY_BREAK
/* rules for C-style comments */
case 113:
YY_RULE_SETUP
#line 181 "../../../phaver/src/lexer.ll"
{ BEGIN(comment_mode); }             /* enter comment mode */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 182 "../../../phaver/src/lexer.ll"
/* discard all but * or \n */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 183 "../../../phaver/src/lexer.ll"
/* discard * (unless ...) */
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 184 "../../../phaver/src/lexer.ll"
{ ++line_number; }       /* bump line number */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 185 "../../../phaver/src/lexer.ll"
{ BEGIN(INITIAL); } /* exit comment mode */
	YY_BREAK
/* rules for quoted strings */
case 118:
YY_RULE_SETUP
#line 189 "../../../phaver/src/lexer.ll"
{
  auto len = strlen(yytext);
  yylval.mystring = new std::string(yytext+1, len-2);
  return STRING_TEXT;
}
	YY_BREAK
/* rules for whitespace */
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 196 "../../../phaver/src/lexer.ll"
{ ++line_number; }        /* bump line number */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 197 "../../../phaver/src/lexer.ll"
/* skip whitespace */
	YY_BREAK
/* catch all rule for errors */
case 121:
YY_RULE_SETUP
#line 200 "../../../phaver/src/lexer.ll"
{
    yyerror(yytext);
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 203 "../../../phaver/src/lexer.ll"
ECHO;
	YY_BREAK
#line 2046 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment_mode):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1138 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1138 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1137);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 203 "../../../phaver/src/lexer.ll"
